namespace OneI.Logable;

using Microsoft.CodeAnalysis.Text;
using OneI.Logable.Definitions;

/// <summary>
/// The code printer.
/// </summary>
internal static partial class CodePrinter
{
    private static readonly HashSet<TypeDef> _types = new();

    /// <summary>
    /// Adds the type.
    /// </summary>
    /// <param name="type">The type.</param>
    public static void AddType(TypeDef type)
    {
        _types.Add(type);
    }

    /// <summary>
    /// Prints the.
    /// </summary>
    /// <param name="methods">The methods.</param>
    /// <param name="tyeps">The tyeps.</param>
    /// <param name="logExtensions">The log extensions.</param>
    /// <param name="loggerExtensions">The logger extensions.</param>
    internal static void Print(IEnumerable<MethodDef> methods, out SourceText tyeps, out SourceText logExtensions, out SourceText loggerExtensions)
    {
        tyeps = PrintTypes();

        logExtensions = PrintLogExtensions(methods.Where(x => x.IsLogger == false).ToList());

        loggerExtensions = PrintLoggerExtensions(methods.Where(x => x.IsLogger == true).ToList());
    }

    /// <summary>
    /// Prints the types.
    /// </summary>
    /// <returns>A SourceText.</returns>
    private static SourceText PrintTypes()
    {
        var content = new IndentedStringBuilder();

        content.AppendLine($"// <auto-generated/> {DateTime.Now:HH:mm:ss}");
        content.AppendLine("#nullable enable");
        content.AppendLine("namespace OneI.Logable;");
        content.AppendLine();
        content.AppendLine("[global::System.Diagnostics.DebuggerStepThrough]");
        content.AppendLine($"internal static class {CodeAssets.LoggerPropertyCreatorClassName}");
        content.AppendLine("{");

        using(var _ = content.Indent())
        {
            foreach(var item in _types)
            {
                PrintType(content, item);

                content.AppendLine();
            }
        }

        content.AppendLine("}");
        content.AppendLine("#nullable restore");

        return SourceText.From(content.ToString(), Encoding.UTF8);
    }

    /// <summary>
    /// Prints the logger extensions.
    /// </summary>
    /// <param name="methods">The methods.</param>
    /// <returns>A SourceText.</returns>
    private static SourceText PrintLoggerExtensions(List<MethodDef> methods)
    {
        var content = new IndentedStringBuilder();

        content.AppendLine($"// <auto-generated/> {DateTime.Now:HH:mm:ss}");
        content.AppendLine("#nullable enable");
        content.AppendLine("namespace OneI.Logable;");
        content.AppendLine();
        content.AppendLine("[global::System.Diagnostics.DebuggerStepThrough]");
        content.AppendLine($"public static partial class {CodeAssets.LoggerExtensionClassName}");
        content.AppendLine("{");

        using(var _ = content.Indent())
        {
            var count = methods.Count;

            for(var i = 0; i < count; i++)
            {
                var item = methods[i];

                PrintMethod(content, item!);

                if(i < count - 1)
                {
                    content.AppendLine();
                }
            }
        }

        content.AppendLine("}");
        content.AppendLine("#nullable restore");

        return SourceText.From(content.ToString(), Encoding.UTF8);
    }

    /// <summary>
    /// Prints the log extensions.
    /// </summary>
    /// <param name="methods">The methods.</param>
    /// <returns>A SourceText.</returns>
    private static SourceText PrintLogExtensions(List<MethodDef> methods)
    {
        var content = new IndentedStringBuilder();

        content.AppendLine($"// <auto-generated/> {DateTime.Now:HH:mm:ss}");
        content.AppendLine("#nullable enable");
        content.AppendLine("namespace OneI.Logable;");
        content.AppendLine();
        content.AppendLine("[global::System.Diagnostics.DebuggerStepThrough]");
        content.AppendLine("public static partial class Log");
        content.AppendLine("{");

        using(var _ = content.Indent())
        {
            var count = methods.Count;

            for(var i = 0; i < count; i++)
            {
                var item = methods[i];

                PrintMethod(content, item!);

                if(i < count - 1)
                {
                    content.AppendLine();
                }
            }
        }

        content.AppendLine("}");
        content.AppendLine("#nullable restore");

        return SourceText.From(content.ToString(), Encoding.UTF8);
    }
}

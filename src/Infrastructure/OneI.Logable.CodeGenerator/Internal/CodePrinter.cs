namespace OneI.Logable.Internal;

using Microsoft.CodeAnalysis.Text;
using OneI.Logable.Definitions;
using OneI.Logable.Internal;

internal static partial class CodePrinter
{
    private static readonly ConcurrentDictionary<ISymbol, TypeDef> _types = new(EqualityComparer<ISymbol>.Default);

    public static void AddType(ISymbol symbol, TypeDef type)
    {
        _types[symbol] = type;
    }

    public static bool TryGetType(ISymbol symbol, out TypeDef type)
    {
        return _types.TryGetValue(symbol, out type);
    }

    internal static void Print(IEnumerable<MethodDef> methods
                               , out SourceText tyeps
                               , out SourceText loggerExtensions)
    {
        tyeps = PrintTypes();

        loggerExtensions = PrintLoggerExtensions(methods.ToList());
    }

    private static SourceText PrintTypes()
    {
        var content = new IndentedStringBuilder();

        content.AppendLine($"// <auto-generated/> {DateTime.Now:HH:mm:ss}");
        content.AppendLine("#nullable enable");
        content.AppendLine("namespace OneI.Logable;");
        content.AppendLine();
        content.AppendLine("using global::System;");
        content.AppendLine("using global::System.Runtime.CompilerServices;");
        content.AppendLine();
        content.AppendLine($"internal static partial class {CodeAssets.LoggerExtension.Name}");
        content.AppendLine("{");

        // 创建自定义属性
        using(var _ = content.Indent())
        {
            var types = _types.Values.OrderBy(x => x.Kind)
                .ThenBy(x => x.WrapperName)
                .ThenBy(x => x.Properties.Count)
                .ToList();

            types.Add(TypeSymbolParser.DefaultType);

            var index = 0;
            foreach(var item in types)
            {
                PrintType(content, item);

                if(++index < types.Count)
                {
                    content.AppendLine();
                }
            }

            var formatter = types.Where(
                x => x.Kind is not TypeDefKind.Literal or TypeDefKind.None)
                .ToList();
            if(formatter.Count > 0)
            {
                content.AppendLine();
                index = 0;
                foreach(var item in formatter)
                {
                    switch(item.Kind)
                    {
                        case TypeDefKind.Tuple:
                        case TypeDefKind.ValueTuple:
                            TupleFormatter(content, item);
                            break;
                        case TypeDefKind.Array:
                            ArrayFormatter(content, item);
                            break;
                        case TypeDefKind.EnumerableT:
                            EnumerableTFormatter(content, item);
                            break;
                        case TypeDefKind.Dictionary:
                            DictionaryFormatter(content, item);
                            break;
                        case TypeDefKind.Enumerable:
                            EnumerableFormatter(content, item);
                            break;
                        case TypeDefKind.Object:
                            ObjectTypeFormatter(content, item);
                            break;
                    }

                    if(++index < formatter.Count)
                    {
                        content.AppendLine();
                    }
                }
            }
        }

        content.AppendLine("}");
        content.AppendLine("#nullable restore");

        return SourceText.From(content.ToString(), Encoding.UTF8);
    }

    private static SourceText PrintLoggerExtensions(List<MethodDef> methods)
    {
        var content = new IndentedStringBuilder();

        content.AppendLine($"// <auto-generated/> {DateTime.Now:HH:mm:ss}");
        content.AppendLine("#nullable enable");
        content.AppendLine("namespace OneI.Logable;");
        content.AppendLine();
        content.AppendLine("using global::System;");
        content.AppendLine("using global::System.Runtime.CompilerServices;");
        content.AppendLine();
        content.AppendLine($"internal static partial class {CodeAssets.LoggerExtension.Name}");
        content.AppendLine("{");

        using(var _ = content.Indent())
        {
            var count = methods.Count;

            for(var i = 0; i < count; i++)
            {
                var item = methods[i];

                PrintMethod(content, item!);

                if(i < count - 1)
                {
                    content.AppendLine();
                }
            }
        }

        content.AppendLine("}");
        content.AppendLine("#nullable restore");

        return SourceText.From(content.ToString(), Encoding.UTF8);
    }

    private static SourceText PrintLogExtensions(List<MethodDef> methods)
    {
        var content = new IndentedStringBuilder();

        content.AppendLine($"// <auto-generated/> {DateTime.Now:HH:mm:ss}");
        content.AppendLine("#nullable enable");
        content.AppendLine("namespace OneI.Logable;");
        content.AppendLine();
        content.AppendLine("using global::System;");
        content.AppendLine();
        content.AppendLine("public static partial class Log");
        content.AppendLine("{");

        using(var _ = content.Indent())
        {
            var count = methods.Count;

            for(var i = 0; i < count; i++)
            {
                var item = methods[i];

                PrintMethod(content, item!);

                if(i < count - 1)
                {
                    content.AppendLine();
                }
            }
        }

        content.AppendLine("}");
        content.AppendLine("#nullable restore");

        return SourceText.From(content.ToString(), Encoding.UTF8);
    }
}

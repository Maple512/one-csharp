namespace OneI.Logable;

using Microsoft.CodeAnalysis.Text;
using OneI.Logable.Definitions;
using OneI.Logable.Internal;

internal static partial class CodePrinter
{
    private static readonly ConcurrentDictionary<ISymbol, TypeDef> _types = new();

    public static void AddType(ISymbol symbol, TypeDef type)
    {
        _types[symbol] = type;
    }

    public static bool TryGetType(ISymbol symbol, out TypeDef type)
    {
        return _types.TryGetValue(symbol, out type);
    }

    internal static void Print(IEnumerable<MethodDef> methods
                               , out SourceText tyeps
                               , out SourceText loggerExtensions)
    {
        tyeps = PrintTypes();

        loggerExtensions = PrintLoggerExtensions(methods.ToList());
    }

    private static SourceText PrintTypes()
    {
        var content = new IndentedStringBuilder();

        content.AppendLine($"// <auto-generated/> {DateTime.Now:HH:mm:ss}");
        content.AppendLine("#nullable enable");
        content.AppendLine("namespace OneI.Logable;");
        content.AppendLine();
        content.AppendLine("using global::System;");
        content.AppendLine("using global::System.Runtime.CompilerServices;");
        content.AppendLine();
        content.AppendLine($"partial class {CodeAssets.LoggerExtension.Name}");
        content.AppendLine("{");

        // 创建自定义属性
        using(var _ = content.Indent())
        {
            var types = _types.Values.Where(x => x.Kind != TypeDefKind.Literal).OrderBy(x => x.Kind)
                .ThenBy(x => x.Properties.Count).ToList();

            var index = 0;
            foreach(var item in types)
            {
                PrintType(content, item);

                if(++index < types.Count)
                {
                    content.AppendLine();
                }
            }
        }

        content.AppendLine("}");
        content.AppendLine("#nullable restore");

        return SourceText.From(content.ToString(), Encoding.UTF8);
    }

    private static SourceText PrintLoggerExtensions(List<MethodDef> methods)
    {
        var content = new IndentedStringBuilder();

        content.AppendLine($"// <auto-generated/> {DateTime.Now:HH:mm:ss}");
        content.AppendLine("#nullable enable");
        content.AppendLine("namespace OneI.Logable;");
        content.AppendLine();
        content.AppendLine("using global::System;");
        content.AppendLine("using global::System.Runtime.CompilerServices;");
        content.AppendLine();
        content.AppendLine($"partial class {CodeAssets.LoggerExtension.Name}");
        content.AppendLine("{");

        using(var _ = content.Indent())
        {
            var count = methods.Count;

            for(var i = 0; i < count; i++)
            {
                var item = methods[i];

                PrintMethod(content, item!);

                if(i < count - 1)
                {
                    content.AppendLine();
                }
            }
        }

        content.AppendLine("}");
        content.AppendLine("#nullable restore");

        return SourceText.From(content.ToString(), Encoding.UTF8);
    }

    private static SourceText PrintLogExtensions(List<MethodDef> methods)
    {
        var content = new IndentedStringBuilder();

        content.AppendLine($"// <auto-generated/> {DateTime.Now:HH:mm:ss}");
        content.AppendLine("#nullable enable");
        content.AppendLine("namespace OneI.Logable;");
        content.AppendLine();
        content.AppendLine("using global::System;");
        content.AppendLine();
        content.AppendLine("public static partial class Log");
        content.AppendLine("{");

        using(var _ = content.Indent())
        {
            var count = methods.Count;

            for(var i = 0; i < count; i++)
            {
                var item = methods[i];

                PrintMethod(content, item!);

                if(i < count - 1)
                {
                    content.AppendLine();
                }
            }
        }

        content.AppendLine("}");
        content.AppendLine("#nullable restore");

        return SourceText.From(content.ToString(), Encoding.UTF8);
    }
}

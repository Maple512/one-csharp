namespace OneI.Logable;
/// <summary>
/// The code assets.
/// </summary>

internal static class CodeAssets
{
    /// <summary>
    /// The logable namespace.
    /// </summary>
    public const string LogableNamespace = $"OneI.Logable";

    /// <summary>
    /// The log class full name.
    /// </summary>
    public const string LogClassFullName = $"{LogableNamespace}.Log";
    /// <summary>
    /// The log extensions file name.
    /// </summary>
    public const string LogExtensionsFileName = "Log.extension.g.cs";
    /// <summary>
    /// The log file name.
    /// </summary>
    public const string LogFileName = "Log.g.cs";
    /// <summary>
    /// The log file content.
    /// </summary>
    public const string LogFileContent = """
        // <auto-generated/>
        #nullable enable
        namespace OneI.Logable;

        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Runtime.CompilerServices;
        using OneI.Textable.Templating.Properties;

        public static partial class Log
        {
            private static ILogger _logger = ILogger.NullLogger;

            /// <summary>
            /// 初始化
            /// </summary>
            /// <param name="logger"></param>
            public static void Initialize(ILogger logger)
            {
                _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            }

            /// <summary>
            /// 初始化
            /// </summary>
            /// <param name="configure"></param>
            public static void Initialize(Action<ILoggerConfiguration> configure)
            {
                var configuration = new LoggerConfiguration();

                configure?.Invoke(configuration);

                _logger = configuration.CreateLogger();
            }

            public static bool IsEnable(LogLevel logLevel)
            {
                return _logger.IsEnable(logLevel);
            }

            #region Write

            public static void Write(LogLevel level, string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(_logger, level, null, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Write(LogLevel level, string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(_logger, level, null, message.AsMemory(), new (0));
            }

            public static void Write(LogLevel level, Exception exception, string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(_logger, level, exception, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Write(LogLevel level, Exception exception, string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(_logger, level, exception, message.AsMemory(), new (0));
            }

            public static void Write(LoggerContext context)
            {
                _logger?.Write(context);
            }

            #endregion Write

            #region Verbose

            public static void Verbose(string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Verbose, null, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Verbose(string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Verbose, null, message.AsMemory(), new (0));
            }

            public static void Verbose(Exception exception, string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Verbose, exception, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Verbose(Exception exception, string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Verbose, exception, message.AsMemory(), new (0));
            }

            #endregion Verbose

            #region Debug

            public static void Debug(string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Debug, null, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Debug(string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Debug, null, message.AsMemory(), new (0));
            }

            public static void Debug(Exception exception, string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Debug, exception, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Debug(Exception exception, string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Debug, exception, message.AsMemory(), new (0));
            }

            #endregion Debug

            #region Information

            public static void Information(string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Information, null, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Information(string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Information, null, message.AsMemory(), new (0));
            }

            public static void Information(Exception exception, string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Information, exception, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Information(Exception exception, string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Information, exception, message.AsMemory(), new (0));
            }

            #endregion Information

            #region Warning

            public static void Warning(string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Warning, null, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Warning(string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Warning, null, message.AsMemory(), new (0));
            }

            public static void Warning(Exception exception, string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Warning, exception, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Warning(Exception exception, string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Warning, exception, message.AsMemory(), new (0));
            }

            #endregion Warning

            #region Error

            public static void Error(string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Error, null, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Error(string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Error, null, message.AsMemory(), new (0));
            }

            public static void Error(Exception exception, string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Error, exception, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Error(Exception exception, string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Error, exception, message.AsMemory(), new (0));
            }

            #endregion Error

            #region Fatal

            public static void Fatal(string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Fatal, null, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Fatal(string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Fatal, null, message.AsMemory(), new (0));
            }

            public static void Fatal(Exception exception, string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Fatal, exception, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Fatal(Exception exception, string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(_logger, LogLevel.Fatal, exception, message.AsMemory(), new (0));
            }

            #endregion Fatal
        }
        #nullable restore
        """;

    /// <summary>
    /// The logger property creator class name.
    /// </summary>
    public const string LoggerPropertyCreatorClassName = "LoggerPropertyCreator";
    /// <summary>
    /// The logger property creator class file name.
    /// </summary>
    public const string LoggerPropertyCreatorClassFileName = $"{LoggerPropertyCreatorClassName}.g.cs";
    /// <summary>
    /// The logger property create method name.
    /// </summary>
    public const string LoggerPropertyCreateMethodName = "Create";
    /// <summary>
    /// The logger property create called name.
    /// </summary>
    public const string LoggerPropertyCreateCalledName = $"{LoggerPropertyCreatorClassName}.{LoggerPropertyCreateMethodName}";

    /// <summary>
    /// The message parameter name.
    /// </summary>
    public const string MessageParameterName = "message";
    /// <summary>
    /// The message parameter type.
    /// </summary>
    public const string MessageParameterType = "global::System.String";

    /// <summary>
    /// The log level parameter name.
    /// </summary>
    public const string LogLevelParameterName = "level";
    /// <summary>
    /// The log level parameter type.
    /// </summary>
    public const string LogLevelParameterType = "global::OneI.Logable.LogLevel";

    /// <summary>
    /// The exception parameter name.
    /// </summary>
    public const string ExceptionParameterName = "exception";
    /// <summary>
    /// The exception parameter type.
    /// </summary>
    public const string ExceptionParameterType = "global::System.HasException";

    /// <summary>
    /// The logger full name.
    /// </summary>
    public const string LoggerFullName = $"{LogableNamespace}.ILogger";
    /// <summary>
    /// The logger extension full name.
    /// </summary>
    public const string LoggerExtensionFullName = "OneI.Logable.LoggerWriteExtensions";
    /// <summary>
    /// The logger extension class name.
    /// </summary>
    public const string LoggerExtensionClassName = "LoggerWriteExtensions";
    /// <summary>
    /// The logger extension class file name.
    /// </summary>
    public const string LoggerExtensionClassFileName = $"{LoggerExtensionClassName}.g.cs";
    /// <summary>
    /// The logger extension extension class file name.
    /// </summary>
    public const string LoggerExtensionExtensionClassFileName = $"{LoggerExtensionClassName}.extension.g.cs";

    /// <summary>
    /// The logger extension class content.
    /// </summary>
    public const string LoggerExtensionClassContent = """
        // <auto-generated/>
        #nullable enable
        namespace OneI.Logable;

        using System;
        using System.Collections.Generic;
        using System.Diagnostics;
        using System.Linq;
        using System.Runtime.CompilerServices;
        using OneI.Textable.Templating.Properties;

        public static partial class LoggerWriteExtensions
        {
            #region Write

            public static void Write(this ILogger logger, LogLevel level, string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(logger, level, null, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Write(this ILogger logger, LogLevel level, string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(logger, level, null, message.AsMemory(), new (0));
            }

            public static void Write(this ILogger logger, LogLevel level, Exception exception, string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(logger, level, exception, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Write(this ILogger logger, LogLevel level, Exception exception, string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(logger, level, exception, message.AsMemory(), new (0));
            }

            #endregion Write

            #region Verbose

            public static void Verbose(this ILogger logger, string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Verbose, null, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Verbose(this ILogger logger, string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Verbose, null, message.AsMemory(), new (0));
            }

            public static void Verbose(this ILogger logger, Exception exception, string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Verbose, exception, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Verbose(this ILogger logger, Exception exception, string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Verbose, exception, message.AsMemory(), new (0));
            }

            #endregion Verbose

            #region Debug

            public static void Debug(this ILogger logger, string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Debug, null, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Debug(this ILogger logger, string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Debug, null, message.AsMemory(), new (0));
            }

            public static void Debug(this ILogger logger, Exception exception, string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Debug, exception, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Debug(this ILogger logger, Exception exception, string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Debug, exception, message.AsMemory(), new (0));
            }

            #endregion Debug

            #region Information

            public static void Information(this ILogger logger, string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Information, null, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Information(this ILogger logger, string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Information, null, message.AsMemory(), new (0));
            }

            public static void Information(this ILogger logger, Exception exception, string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Information, exception, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Information(this ILogger logger, Exception exception, string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Information, exception, message.AsMemory(), new (0));
            }

            #endregion Information

            #region Warning

            public static void Warning(this ILogger logger, string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Warning, null, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Warning(this ILogger logger, string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Warning, null, message.AsMemory(), new (0));
            }

            public static void Warning(this ILogger logger, Exception exception, string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Warning, exception, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Warning(this ILogger logger, Exception exception, string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Warning, exception, message.AsMemory(), new (0));
            }

            #endregion Warning

            #region Error

            public static void Error(this ILogger logger, string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Error, null, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Error(this ILogger logger, string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Error, null, message.AsMemory(), new (0));
            }

            public static void Error(this ILogger logger, Exception exception, string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Error, exception, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Error(this ILogger logger, Exception exception, string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Error, exception, message.AsMemory(), new (0));
            }

            #endregion Error

            #region Fatal

            public static void Fatal(this ILogger logger, string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Fatal, null, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Fatal(this ILogger logger, string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Fatal, null, message.AsMemory(), new (0));
            }

            public static void Fatal(this ILogger logger, Exception exception, string message, [CallerFilePath] string? filePath = null, [CallerMemberName] string? member = null, [CallerLineNumber] int? line = null)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Fatal, exception, message.AsMemory(), null, filePath, member, line);
            }

            [Conditional("DEBUG")]
            public static void Fatal(this ILogger logger, Exception exception, string message, params object?[] args)
            {
                LoggerExtensions.PackageWrite(logger, LogLevel.Fatal, exception, message.AsMemory(), new (0));
            }

            #endregion Fatal
        }
        #nullable restore
        """;
}

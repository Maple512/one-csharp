//HintName: LoggerWriteExtensions.g.cs
// <auto-generated/>
#nullable enable
namespace OneI.Logable;

using System;
using System.Collections.Generic;
using System.Linq;
using OneI.Logable.Infrastructure;
using OneI.Logable.Templating;
using OneI.Logable.Templating.Properties;

public static partial class LoggerWriteExtensions
{
    #region Write

    public static void Write(this ILogger logger, LogLevel level, string message)
    {
        LoggerExtensions.PackageWrite(logger, level, null, message, null);
    }

    public static void Write(this ILogger logger, LogLevel level, string message, params object?[] args)
    {
        LoggerExtensions.PackageWrite(logger, level, null, message, args.Select(x => PropertyValue.CreateLiteral(x)));
    }

    public static void Write(this ILogger logger, LogLevel level, Exception exception, string message)
    {
        LoggerExtensions.PackageWrite(logger, level, exception, message, null);
    }

    public static void Write(this ILogger logger, LogLevel level, Exception exception, string message, params object?[] args)
    {
        LoggerExtensions.PackageWrite(logger, level, exception, message, args.Select(x => PropertyValue.CreateLiteral(x)));
    }

    #endregion Write

    #region Verbose

    public static void Verbose(this ILogger logger, string message)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Verbose, null, message);
    }

    public static void Verbose(this ILogger logger, string message, params object?[] args)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Verbose, null, message, args.Select(x => PropertyValue.CreateLiteral(x)));
    }

    public static void Verbose(this ILogger logger, Exception exception, string message)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Verbose, exception, message, null);
    }

    public static void Verbose(this ILogger logger, Exception exception, string message, params object?[] args)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Verbose, exception, message, args.Select(x => PropertyValue.CreateLiteral(x)));
    }

    #endregion Verbose

    #region Debug

    public static void Debug(this ILogger logger, string message)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Debug, null, message);
    }

    public static void Debug(this ILogger logger, string message, params object?[] args)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Debug, null, message, args.Select(x => PropertyValue.CreateLiteral(x)));
    }

    public static void Debug(this ILogger logger, Exception exception, string message)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Debug, exception, message, null);
    }

    public static void Debug(this ILogger logger, Exception exception, string message, params object?[] args)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Debug, exception, message, args.Select(x => PropertyValue.CreateLiteral(x)));
    }

    #endregion Debug

    #region Information

    public static void Information(this ILogger logger, string message)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Information, null, message);
    }

    public static void Information(this ILogger logger, string message, params object?[] args)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Information, null, message, args.Select(x => PropertyValue.CreateLiteral(x)));
    }

    public static void Information(this ILogger logger, Exception exception, string message)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Information, exception, message, null);
    }

    public static void Information(this ILogger logger, Exception exception, string message, params object?[] args)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Information, exception, message, args.Select(x => PropertyValue.CreateLiteral(x)));
    }

    #endregion Information

    #region Warning

    public static void Warning(this ILogger logger, string message)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Warning, null, message);
    }

    public static void Warning(this ILogger logger, string message, params object?[] args)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Warning, null, message, args.Select(x => PropertyValue.CreateLiteral(x)));
    }

    public static void Warning(this ILogger logger, Exception exception, string message)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Warning, exception, message, null);
    }

    public static void Warning(this ILogger logger, Exception exception, string message, params object?[] args)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Warning, exception, message, args.Select(x => PropertyValue.CreateLiteral(x)));
    }

    #endregion Warning

    #region Error

    public static void Error(this ILogger logger, string message)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Error, null, message);
    }

    public static void Error(this ILogger logger, string message, params object?[] args)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Error, null, message, args.Select(x => PropertyValue.CreateLiteral(x)));
    }

    public static void Error(this ILogger logger, Exception exception, string message)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Error, exception, message, null);
    }

    public static void Error(this ILogger logger, Exception exception, string message, params object?[] args)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Error, exception, message, args.Select(x => PropertyValue.CreateLiteral(x)));
    }

    #endregion Error

    #region Fatal

    public static void Fatal(this ILogger logger, string message)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Fatal, null, message);
    }

    public static void Fatal(this ILogger logger, string message, params object?[] args)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Fatal, null, message, args.Select(x => PropertyValue.CreateLiteral(x)));
    }

    public static void Fatal(this ILogger logger, Exception exception, string message)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Fatal, exception, message, null);
    }

    public static void Fatal(this ILogger logger, Exception exception, string message, params object?[] args)
    {
        LoggerExtensions.PackageWrite(logger, LogLevel.Fatal, exception, message, args.Select(x => PropertyValue.CreateLiteral(x)));
    }

    #endregion Fatal
}
#nullable restore
//HintName: Log.g.cs
// <auto-generated/>
#nullable enable
namespace OneI.Logable;

using global::System;
using global::System.Collections.Generic;
using global::System.Linq;
using global::OneI.Logable.Templating;
using global::OneI.Logable.Templating.Properties;

public static partial class Log
{
    private static global::OneI.Logable.ILogger _logger = global::OneI.Logable.Infrastructure.NullLogger.Instance;

    /// <summary>
    /// 初始化
    /// </summary>
    /// <param name="logger"></param>
    public static void Initialize(global::OneI.Logable.ILogger logger)
    {
        _logger = logger;
    }

    public static bool IsEnable(LogLevel logLevel) => _logger.IsEnable(logLevel);

    #region Write

    public static void Write(LogLevel level, string message)
    {
        WriteCore(level, message, null, null);
    }

    public static void Write(LogLevel level, string message, params object?[] args)
    {
        WriteCore(level, message, null, args.Select(x => PropertyValue.Create(x)));
    }

    public static void Write(LogLevel level, Exception exception, string message)
    {
        WriteCore(level, message, exception, null);
    }

    public static void Write(LogLevel level, Exception exception, string message, params object?[] args)
    {
        WriteCore(level, message, exception, args.Select(x => PropertyValue.Create(x)));
    }

    private static void WriteCore(
        LogLevel level,
        string message,
        Exception? exception = null,
        IEnumerable<PropertyValue>? propertyValues = null)
    {
        propertyValues ??= new List<PropertyValue>(0);

        var template = TextParser.Parse(message);
        var tokens = template.Properties;

        var count = propertyValues.Count();
        var length = Math.Max(tokens.Count, count);

        var properties = new List<Property>(length);

        for(var i = 0; i < length; i++)
        {
            var name = $"__{i}";
            var index = i;
            if(i < tokens.Count)
            {
                var token = tokens[i];

                name = token.Name;

                index = token.ParameterIndex ?? i;
            }

            if(count > index)
            {
                properties.Add(new Property(name, propertyValues.ElementAt(i)));
            }
        }

        var context = new LoggerContext(level, template, exception, properties);

        _logger?.Write(context);
    }

    #endregion Write

    #region Verbose

    public static void Verbose(string message)
    {
        WriteCore(LogLevel.Verbose, message);
    }

    public static void Verbose(string message, params object?[] args)
    {
        WriteCore(LogLevel.Verbose, message, null, args.Select(x => PropertyValue.Create(x)));
    }

    public static void Verbose(Exception exception, string message)
    {
        WriteCore(LogLevel.Verbose, message, exception, null);
    }

    public static void Verbose(Exception exception, string message, params object?[] args)
    {
        WriteCore(LogLevel.Verbose, message, exception, args.Select(x => PropertyValue.Create(x)));
    }

    #endregion Verbose

    #region Debug

    public static void Debug(string message)
    {
        WriteCore(LogLevel.Debug, message);
    }

    public static void Debug(string message, params object?[] args)
    {
        WriteCore(LogLevel.Debug, message, null, args.Select(x => PropertyValue.Create(x)));
    }

    public static void Debug(Exception exception, string message)
    {
        WriteCore(LogLevel.Debug, message, exception, null);
    }

    public static void Debug(Exception exception, string message, params object?[] args)
    {
        WriteCore(LogLevel.Debug, message, exception, args.Select(x => PropertyValue.Create(x)));
    }

    #endregion Debug

    #region Information

    public static void Information(string message)
    {
        WriteCore(LogLevel.Information, message);
    }

    public static void Information(string message, params object?[] args)
    {
        WriteCore(LogLevel.Information, message, null, args.Select(x => PropertyValue.Create(x)));
    }

    public static void Information(Exception exception, string message)
    {
        WriteCore(LogLevel.Information, message, exception, null);
    }

    public static void Information(Exception exception, string message, params object?[] args)
    {
        WriteCore(LogLevel.Information, message, exception, args.Select(x => PropertyValue.Create(x)));
    }

    #endregion Information

    #region Warning

    public static void Warning(string message)
    {
        WriteCore(LogLevel.Warning, message);
    }

    public static void Warning(string message, params object?[] args)
    {
        WriteCore(LogLevel.Warning, message, null, args.Select(x => PropertyValue.Create(x)));
    }

    public static void Warning(Exception exception, string message)
    {
        WriteCore(LogLevel.Warning, message, exception, null);
    }

    public static void Warning(Exception exception, string message, params object?[] args)
    {
        WriteCore(LogLevel.Warning, message, exception, args.Select(x => PropertyValue.Create(x)));
    }

    #endregion Warning

    #region Error

    public static void Error(string message)
    {
        WriteCore(LogLevel.Error, message);
    }

    public static void Error(string message, params object?[] args)
    {
        WriteCore(LogLevel.Error, message, null, args.Select(x => PropertyValue.Create(x)));
    }

    public static void Error(Exception exception, string message)
    {
        WriteCore(LogLevel.Error, message, exception, null);
    }

    public static void Error(Exception exception, string message, params object?[] args)
    {
        WriteCore(LogLevel.Error, message, exception, args.Select(x => PropertyValue.Create(x)));
    }

    #endregion Error

    #region Fatal

    public static void Fatal(string message)
    {
        WriteCore(LogLevel.Fatal, message);
    }

    public static void Fatal(string message, params object?[] args)
    {
        WriteCore(LogLevel.Fatal, message, null, args.Select(x => PropertyValue.Create(x)));
    }

    public static void Fatal(Exception exception, string message)
    {
        WriteCore(LogLevel.Fatal, message, exception, null);
    }

    public static void Fatal(Exception exception, string message, params object?[] args)
    {
        WriteCore(LogLevel.Fatal, message, exception, args.Select(x => PropertyValue.Create(x)));
    }

    #endregion Fatal
}

#nullable restore

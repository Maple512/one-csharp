//HintName: Log.g.cs
// <auto-generated/>
#nullable enable
namespace OneI.Logable;

using System;
using System.Collections.Generic;
using System.Linq;
using OneI.Logable.Infrastructure;
using OneI.Logable.Templating;
using OneI.Logable.Templating.Properties;

public static partial class Log
{
    private static ILogger _logger = NullLogger.Instance;

    /// <summary>
    /// 初始化
    /// </summary>
    /// <param name="logger"></param>
    public static void Initialize(ILogger logger)
    {
        _logger = logger;
    }

    public static bool IsEnable(LogLevel logLevel)
    {
        return _logger.IsEnable(logLevel);
    }

    #region Write

    public static void Write(LogLevel level, string message)
    {
        WriteCore(level, null, message, null);
    }

    public static void Write(LogLevel level, string message, params object?[] args)
    {
        WriteCore(level, null, message, args.Select(x => PropertyValue.Create(x)));
    }

    public static void Write(LogLevel level, Exception exception, string message)
    {
        WriteCore(level, exception, message, null);
    }

    public static void Write(LogLevel level, Exception exception, string message, params object?[] args)
    {
        WriteCore(level, exception, message, args.Select(x => PropertyValue.Create(x)));
    }

    public static void Write(LoggerContext context)
    {
        _logger?.Write(context);
    }

    private static void WriteCore(
        LogLevel level,
        Exception? exception,
        string message,
        IEnumerable<PropertyValue>? propertyValues = null)
    {
        propertyValues ??= new List<PropertyValue>(0);

        var template = TextParser.Parse(message);
        var tokens = template.Properties;

        var count = propertyValues.Count();
        var length = Math.Max(tokens.Count, count);

        var properties = new List<Property>(length);

        for(var i = 0; i < length; i++)
        {
            var name = $"__{i}";
            var index = i;
            if(i < tokens.Count)
            {
                var token = tokens[i];

                name = token.Name;

                index = token.ParameterIndex ?? i;
            }

            if(count > index)
            {
                properties.Add(new Property(name, propertyValues.ElementAt(i)));
            }
        }

        var context = new LoggerContext(level, template, exception, properties);

        _logger?.Write(context);
    }

    #endregion Write

    #region Verbose

    public static void Verbose(string message)
    {
        WriteCore(LogLevel.Verbose, null, message);
    }

    public static void Verbose(string message, params object?[] args)
    {
        WriteCore(LogLevel.Verbose, null, message, args.Select(x => PropertyValue.Create(x)));
    }

    public static void Verbose(Exception exception, string message)
    {
        WriteCore(LogLevel.Verbose, exception, message, null);
    }

    public static void Verbose(Exception exception, string message, params object?[] args)
    {
        WriteCore(LogLevel.Verbose, exception, message, args.Select(x => PropertyValue.Create(x)));
    }

    #endregion Verbose

    #region Debug

    public static void Debug(string message)
    {
        WriteCore(LogLevel.Debug, null, message);
    }

    public static void Debug(string message, params object?[] args)
    {
        WriteCore(LogLevel.Debug, null, message, args.Select(x => PropertyValue.Create(x)));
    }

    public static void Debug(Exception exception, string message)
    {
        WriteCore(LogLevel.Debug, exception, message, null);
    }

    public static void Debug(Exception exception, string message, params object?[] args)
    {
        WriteCore(LogLevel.Debug, exception, message, args.Select(x => PropertyValue.Create(x)));
    }

    #endregion Debug

    #region Information

    public static void Information(string message)
    {
        WriteCore(LogLevel.Information, null, message);
    }

    public static void Information(string message, params object?[] args)
    {
        WriteCore(LogLevel.Information, null, message, args.Select(x => PropertyValue.Create(x)));
    }

    public static void Information(Exception exception, string message)
    {
        WriteCore(LogLevel.Information, exception, message, null);
    }

    public static void Information(Exception exception, string message, params object?[] args)
    {
        WriteCore(LogLevel.Information, exception, message, args.Select(x => PropertyValue.Create(x)));
    }

    #endregion Information

    #region Warning

    public static void Warning(string message)
    {
        WriteCore(LogLevel.Warning, null, message);
    }

    public static void Warning(string message, params object?[] args)
    {
        WriteCore(LogLevel.Warning, null, message, args.Select(x => PropertyValue.Create(x)));
    }

    public static void Warning(Exception exception, string message)
    {
        WriteCore(LogLevel.Warning, exception, message, null);
    }

    public static void Warning(Exception exception, string message, params object?[] args)
    {
        WriteCore(LogLevel.Warning, exception, message, args.Select(x => PropertyValue.Create(x)));
    }

    #endregion Warning

    #region Error

    public static void Error(string message)
    {
        WriteCore(LogLevel.Error, null, message);
    }

    public static void Error(string message, params object?[] args)
    {
        WriteCore(LogLevel.Error, null, message, args.Select(x => PropertyValue.Create(x)));
    }

    public static void Error(Exception exception, string message)
    {
        WriteCore(LogLevel.Error, exception, message, null);
    }

    public static void Error(Exception exception, string message, params object?[] args)
    {
        WriteCore(LogLevel.Error, exception, message, args.Select(x => PropertyValue.Create(x)));
    }

    #endregion Error

    #region Fatal

    public static void Fatal(string message)
    {
        WriteCore(LogLevel.Fatal, null, message);
    }

    public static void Fatal(string message, params object?[] args)
    {
        WriteCore(LogLevel.Fatal, null, message, args.Select(x => PropertyValue.Create(x)));
    }

    public static void Fatal(Exception exception, string message)
    {
        WriteCore(LogLevel.Fatal, exception, message, null);
    }

    public static void Fatal(Exception exception, string message, params object?[] args)
    {
        WriteCore(LogLevel.Fatal, exception, message, args.Select(x => PropertyValue.Create(x)));
    }

    #endregion Fatal
}
#nullable restore
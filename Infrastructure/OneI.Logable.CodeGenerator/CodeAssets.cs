namespace OneI.Logable;

public static class CodeAssets
{
    public const string Namespace = "OneI.Logable";

    public const string LogClassName = "Log";

    public const string LogClassFullName = $"{Namespace}.{LogClassName}";

    public const string LogClassFileName = "Log.g.cs";

    public const string LogClassContent = """
// <auto-generated/>
#nullable enable
namespace OneI.Logable;

using global::System;
using global::System.Collections.Generic;
using global::System.Linq;
using global::System.Text;
using global::System.Threading.Tasks;
using global::OneI.Logable.Templating;
using global::OneI.Logable.Templating.Properties;

public static partial class Log
{
    private static ILogger _logger = global::OneI.Logable.Infrastructure.NullLogger.Instance;

    /// <summary>
    /// 初始化
    /// </summary>
    /// <param name="logger"></param>
    public static void Initialize(ILogger logger)
    {
        _logger = logger;
    }
#if DEBUG
    public static void Write(
        LogLevel level,
        string message,
        params object?[] args){}
#endif

    public static void Write(LogLevel level, string message)
    {
        
    }

    public static void Write(LoggerContext context)
    {
        _logger?.Write(context);
    }

#pragma warning disable IDE0051 // 删除未使用的私有成员
    private static void WarpMessage(
#pragma warning restore IDE0051 // 删除未使用的私有成员
        LogLevel level,
        string message,
        Exception? exception,
        List<PropertyValue> propertyValues)
    {
        var template = TextParser.Parse(message);
        var tokens = template.Properties;

        var length = Math.Max(tokens.Count, propertyValues.Count);
        var properties = new List<Property>(length);

        for(var i = 0; i < length; i++)
        {
            var name = $"__{i}";
            var index = i;
            if(i < tokens.Count)
            {
                var token = tokens[i];

                name = token.Name;

                index = token.ParameterIndex ?? i;
            }

            properties.Add(new Property(name, propertyValues[index]));
        }

        var context = new LoggerContext(level, template, exception, properties);

        Write(context);
    }
}
#nullable restore
""";

    public const string LogImplClassFileName = "Log_Impl.g.cs";
}
